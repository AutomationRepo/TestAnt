package ProblemStatements;

public class LinkedList<T> {
	private ListNode<T> head;

	public ListNode<T> getHead() {
		return head;
	}

	public void setHead(ListNode<T> head) {
		this.head = head;
	}

	public LinkedList() {
		head = null;
	}

	public LinkedList(T value) {
		head = new ListNode<>();
		head.data = value;
		head.next = null;
	}

	public LinkedList(ListNode<T> node) {
		head = node;
	}

	public void addNode(T value) {
		if (head == null) {
			head = new ListNode<>(value);
		} else {
			ListNode<T> tmp = head;
			while (tmp.next != null)
				tmp = tmp.next;
			tmp.next = new ListNode<>(value);
		}
	}

	public void addNode(ListNode<T> node) {
		if (head == null)
			head = node;
		else {
			ListNode<T> tmp = head;
			while (tmp.next != null)
				tmp = tmp.next;
			tmp.next = node;
		}
	}

	public void addNodeAt(T value, int position) {
		if (position <= 0)
			return;

		if (head == null)
			head = new ListNode<>(value);
		else {
			ListNode<T> tmp = getNode(position - 1);
			ListNode<T> tmp1 = tmp.next;
			tmp.next = new ListNode<>(value);
			tmp.next.next = tmp1;
		}
	}

	public void deleteLastNode() {
		if (head == null)
			return;
		ListNode<T> tmp = head;
		while (tmp.next.next != null)
			tmp = tmp.next;
		tmp.next = null;
	}

	public void deleteFirstNode() {
		if (head == null)
			return;
		head = head.next;
	}

	public void deleteNodeAt(int position) {
		if (head == null | position <= 0)
			return;

		ListNode<T> tmp = getNode(position - 1);
		tmp.next = tmp.next.next;
	}

	public ListNode<T> getNode(int position) {
		if (position < 0 | head == null)
			return null;
		int cnt = 1;
		ListNode<T> tmp = head;
		while (tmp.next != null) {
			if (cnt == position)
				break;
			tmp = tmp.next;
			cnt++;
		}
		return tmp;
	}

	public int count() {
		if (head == null)
			return 0;
		int cnt = 1;
		ListNode<T> tmp = head;
		while (tmp.next != null) {
			cnt++;
			tmp = tmp.next;
		}
		return cnt;
	}

	public void displayList() {
		if (head == null)
			return;
		ListNode<T> tmp = head;
		while (tmp != null) {
			System.out.print(tmp.data + " ");
			tmp = tmp.next;
		}
	}

	public void reverseList() {
		if (head == null)
			return;
		ListNode<T> current = head;
		ListNode<T> previous = null;

		while (current != null) {
			ListNode<T> tmp = current.next;
			current.next = previous;
			previous = current;
			current = tmp;
		}
		head = previous;

	}

	public ListNode<T> reverseList_recur(ListNode<T> headNode) {
		if(headNode == null  || headNode.next ==null)
            return headNode;

		ListNode<T> current = headNode;
		ListNode<T> rest = headNode.next;

        ListNode<T>  revese = reverseList_recur(rest);
        current.next.next= current;

        current.next = null;
       
        return revese;
		
	}

	public void reverseList_recur(ListNode<T> current,ListNode<T> previuos){
		if(current.next==null)
			head=current;
		
		if(current==null)
			return;
		
		reverseList_recur(current.next,current);
		current.next=previuos;
		previuos.next=null;
		
	}
}
